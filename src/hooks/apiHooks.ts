import {
  MediaItemWithOwner,
  UserWithNoPassword,
  MediaItem,
} from 'hybrid-types/DBTypes';
import {useState, useEffect} from 'react';
import {fetchData} from '../lib/functions';
import {Credentials, RegisterCredentials} from '../types/LocalTypes';
import {
  AvailableResponse,
  LoginResponse,
  MessageResponse,
  UploadResponse,
  UserResponse,
} from 'hybrid-types/MessageTypes';

// MEDIAN KÄYTTÖ

const useMedia = () => {
  const [mediaArray, setMediaArray] = useState<MediaItemWithOwner[]>([]);

  useEffect(() => {
    const getMedia = async () => {
      try {
        const media = await fetchData<MediaItemWithOwner[]>(
          import.meta.env.VITE_MEDIA_API + '/media',
        );

        const mediaWithOwner: MediaItemWithOwner[] = await Promise.all(
          media.map(async (item) => {
            const owner = await fetchData<UserWithNoPassword>(
              import.meta.env.VITE_AUTH_API + '/users/' + item.user_id,
            );

            const mediaItem: MediaItemWithOwner = {
              ...item,
              username: owner.username,
            };

            return mediaItem;
          }),
        );

        setMediaArray(mediaWithOwner);
      } catch (error) {
        console.error((error as Error).message);
      }
    };

    getMedia();
  }, []);

  const postMedia = async (
    file: UploadResponse,
    inputs: Record<string, string>,
    token: string,
  ) => {
    console.log('post media token:', token);
    // TODO: create a suitable object for Media API, the type is MediaItem without media_id, user_id, thumbnail and created_at. All those are generated by the API.
    const mediaObject: Omit<
      MediaItem,
      'media_id' | 'user_id' | 'thumbnail' | 'screenshots' | 'created_at'
    > = {
      title: inputs.title,
      description: inputs.description,
      filename: file.data.filename,
      media_type: file.data.media_type,
      filesize: file.data.filesize,
    };
    // post the data to Media API and get the data as MessageResponse
    const options = {
      method: 'POST',
      headers: {
        Authorization: 'Bearer ' + token,
        'Content-type': 'application/json',
      },
      body: JSON.stringify(mediaObject),
    };
    // TODO: return the data
    return await fetchData<MessageResponse>(
      import.meta.env.VITE_MEDIA_API + '/media',
      options,
    );
  };
  return {mediaArray, postMedia};
};

// FILE

const useFile = () => {
  const postFile = async (file: File, token: string) => {
    console.log('post file token:', token);
    // create FormData object
    const formData = new FormData();
    // add file to FormData
    formData.append('file', file);
    // upload the file to file server and get the file data POST
    const options = {
      method: 'POST',
      headers: {Authorization: 'Bearer ' + token},
      body: formData,
    };
    // return the file data. The type is UploadResponse
    return await fetchData<UploadResponse>(
      import.meta.env.VITE_UPLOAD_API + '/upload',
      options,
    );
  };
  return {postFile};
};

// AUTENTIKOINTI

const useAuthentication = () => {
  // kirjautuminen
  const postLogin = async (credentials: Credentials) => {
    const options = {
      method: 'POST',
      body: JSON.stringify(credentials),
      headers: {'Content-Type': 'application/json'},
    };
    try {
      return await fetchData<LoginResponse>(
        import.meta.env.VITE_AUTH_API + '/auth/login',
        options,
      );
    } catch (error) {
      throw new Error((error as Error).message);
    }
  };

  return {postLogin};
};

// KÄYTTÄJÄ

const useUser = () => {
  // hae käyttäjä ! huom! vaikka get -> tarvitaan options, koska taarvitaan headersiin bearer
  const getUserByToken = async (token: string) => {
    const options = {
      headers: {Authorization: 'Bearer ' + token},
    };
    return await fetchData<UserResponse>(
      import.meta.env.VITE_AUTH_API + '/users/token',
      options,
    );
  };

  // rekisteröinti
  const postRegister = async (credentials: RegisterCredentials) => {
    const options = {
      method: 'POST',
      body: JSON.stringify(credentials),
      headers: {'Content-Type': 'application/json'},
    };
    console.log(credentials);
    try {
      return await fetchData<UserResponse>(
        import.meta.env.VITE_AUTH_API + '/users',
        options,
      );
    } catch (error) {
      console.error(error);
      // throw new Error((error as Error).message);
    }
  };

  // NIMI & EMAIL AVAILABLE
  const getUsernameAvailable = async (username: string) => {
    try {
      return await fetchData<AvailableResponse>(
        import.meta.env.VITE_AUTH_API + '/users/username/' + username,
      );
    } catch (error) {
      console.error(error);
    }
  };

  const getEmailAvailable = async (email: string) => {
    // fetch from endpoint /users/email/:email
    try {
      return await fetchData<AvailableResponse>(
        import.meta.env.VITE_AUTH_API + '/users/email/' + email,
      );
    } catch (error) {
      console.log('Ei onnistuttu hakemaan emailia!');
      console.error(error);
    }
  };

  return {
    getUserByToken,
    postRegister,
    getUsernameAvailable,
    getEmailAvailable,
  };
};

const useComments = () => {
  // TODO: iplement media/comments resource API connections
};

export {useMedia, useAuthentication, useUser, useComments, useFile};
